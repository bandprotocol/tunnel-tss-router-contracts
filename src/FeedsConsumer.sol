// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "./BandTssVerifier.sol";
import "./interfaces/IBandTssVerifier.sol";

contract FeedsConsumer {
    // The prefix for the feeds fixed-point prices abi-encoded message
    bytes8 constant FEEDS_FIXED_POINT_ABI_PREFIX = 0x4adb3cffcba0ad5a;
    // The band tss verifier contract
    IBandTssVerifier public immutable bandTssVerifier;

    // A signal price information from bandchain.
    struct SignalPriceInfo {
        bytes32 signalID;
        uint64 price;
    }

    struct Price {
        uint64 price;
        uint64 timestamp;
    }

    // signalID to feeds price data
    mapping(bytes32 => Price) public prices;

    event RelayFeedsPriceResult(
        bytes32 indexed signalID,
        uint64 price,
        uint64 timestamp
    );

    constructor(IBandTssVerifier _bandTssVerifier) {
        bandTssVerifier = _bandTssVerifier;
    }

    /// @dev relay the oracle result and store it in the chain
    /// @param signingID is the signing ID of the feeds price data
    /// @param timestamp is the timestamp of the feeds price data
    /// @param hashOriginator is the hashed originator of the feeds price data
    /// @param rAddress is the address form of the commitment R
    /// @param s represents the Schnorr signature generated by the current circle's private key
    /// @param signalPrices is the oracle result from bandchain
    function relayFeedsPriceData(
        uint64 signingID,
        uint64 timestamp,
        bytes32 hashOriginator,
        address rAddress,
        uint256 s,
        SignalPriceInfo[] memory signalPrices
    ) external {
        bytes memory data = abi.encodePacked(
            FEEDS_FIXED_POINT_ABI_PREFIX,
            abi.encode(signalPrices, timestamp)
        );

        require(
            bandTssVerifier.verifySignature(
                signingID,
                timestamp,
                hashOriginator,
                rAddress,
                s,
                data
            ),
            "FeedConsumer: Fail to verify message."
        );

        for (uint256 i = 0; i < signalPrices.length; i++) {
            prices[signalPrices[i].signalID] = Price({
                price: signalPrices[i].price,
                timestamp: timestamp
            });

            emit RelayFeedsPriceResult(
                signalPrices[i].signalID,
                signalPrices[i].price,
                timestamp
            );
        }
    }
}
