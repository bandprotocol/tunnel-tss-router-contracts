// SPDX-License-Identifier: MIT

pragma solidity ^0.8.23;

import "forge-std/Test.sol";
import "forge-std/console.sol";

import "./helper/RegressionTestHelper.sol";

contract RelayGasMeasurementTest is Test {
    uint256[] points;

    function setUp() public {
        for (uint256 i = 0; i < 50; i++) {
            points.push(0);
        }
    }

    function test_det() public pure {
        assertEq(
            RegressionTestHelper.det4(
                RegressionTestHelper.Matrix4x4({
                    a11: 1,
                    a12: 0,
                    a13: 0,
                    a14: 0,
                    a21: 0,
                    a22: 1,
                    a23: 0,
                    a24: 0,
                    a31: 0,
                    a32: 0,
                    a33: 1,
                    a34: 0,
                    a41: 0,
                    a42: 0,
                    a43: 0,
                    a44: 1
                })
            ),
            int256(1)
        );
        assertEq(
            RegressionTestHelper.det4(
                RegressionTestHelper.Matrix4x4({
                    a11: 1,
                    a12: 1,
                    a13: 1,
                    a14: 1,
                    a21: 1,
                    a22: 1,
                    a23: 1,
                    a24: 1,
                    a31: 1,
                    a32: 1,
                    a33: 1,
                    a34: 1,
                    a41: 1,
                    a42: 1,
                    a43: 1,
                    a44: 1
                })
            ),
            int256(0)
        );
        assertEq(
            RegressionTestHelper.det4(
                RegressionTestHelper.Matrix4x4({
                    a11: 232,
                    a12: -23,
                    a13: -7775,
                    a14: 911,
                    a21: 923,
                    a22: 3032,
                    a23: 0,
                    a24: -1,
                    a31: 1,
                    a32: 3492,
                    a33: -4728,
                    a34: -1653,
                    a41: 5891,
                    a42: -8052,
                    a43: -9570,
                    a44: 100
                })
            ),
            int256(447638294209192)
        );
    }

    function testCoeffCalculation() public {
        RegressionTestHelper.Linear memory fx;
        RegressionTestHelper.Quadratic memory gx;
        RegressionTestHelper.Cubic memory hx;

        // case1 ---------------------------------------------------------------------------

        points[0] = ((0 << 128) + 98787);
        points[1] = ((1 << 128) + 99893);
        points[2] = ((2 << 128) + 100975);
        points[3] = ((3 << 128) + 102033);
        points[4] = ((4 << 128) + 103139);
        points[5] = ((5 << 128) + 104221);
        points[6] = ((6 << 128) + 105303);
        points[7] = ((7 << 128) + 106386);
        points[8] = ((8 << 128) + 107444);
        points[9] = ((9 << 128) + 108551);
        points[10] = ((10 << 128) + 109633);
        points[11] = ((11 << 128) + 110716);
        points[12] = ((12 << 128) + 111799);
        points[13] = ((13 << 128) + 112882);
        points[14] = ((14 << 128) + 113953);
        points[15] = ((15 << 128) + 115048);
        points[16] = ((16 << 128) + 116119);
        points[17] = ((17 << 128) + 117215);
        points[18] = ((18 << 128) + 118286);
        points[19] = ((19 << 128) + 119382);
        points[20] = ((20 << 128) + 120441);
        points[21] = ((21 << 128) + 121537);
        points[22] = ((22 << 128) + 122621);
        points[23] = ((23 << 128) + 123705);
        points[24] = ((24 << 128) + 124789);
        points[25] = ((25 << 128) + 125873);
        points[26] = ((26 << 128) + 126933);
        points[27] = ((27 << 128) + 128041);
        points[28] = ((28 << 128) + 129102);
        points[29] = ((29 << 128) + 130222);
        points[30] = ((30 << 128) + 131295);
        points[31] = ((31 << 128) + 132380);
        points[32] = ((32 << 128) + 133452);
        points[33] = ((33 << 128) + 134525);
        points[34] = ((34 << 128) + 135634);
        points[35] = ((35 << 128) + 136719);
        points[36] = ((36 << 128) + 137780);
        points[37] = ((37 << 128) + 138878);
        points[38] = ((38 << 128) + 139963);
        points[39] = ((39 << 128) + 141061);
        points[40] = ((40 << 128) + 142158);
        points[41] = ((41 << 128) + 143244);
        points[42] = ((42 << 128) + 144294);
        points[43] = ((43 << 128) + 145416);
        points[44] = ((44 << 128) + 146490);
        points[45] = ((45 << 128) + 147564);
        points[46] = ((46 << 128) + 148638);
        points[47] = ((47 << 128) + 149748);
        points[48] = ((48 << 128) + 150822);
        points[49] = ((49 << 128) + 151909);

        // Results from np.polyfit
        //
        // --- Optimal Linear ---
        // a (slope): 1083.747370948379
        // b (y-intercept): 98788.16941176468
        // ------------------------------

        // --- Optimal Quadratic ---
        // a (x^2 term): 0.04896227721860076
        // b (x term):   1081.348219364669
        // c (constant): 98807.36262443438
        // ------------------------------

        // --- Optimal Cubic ---
        // a (x^3 term): 0.000940915846927263
        // b (x^2 term): -0.020195037530464532
        // c (x term):   1082.6900594539666
        // d (constant): 98802.16199436528
        // ------------------------------

        fx = RegressionTestHelper.linear(points);
        assertEq(fx.c1, 1083747370948379351740);
        assertEq(fx.c0, 98788169411764705882352);

        gx = RegressionTestHelper.quadratic(points);
        assertEq(gx.c2, 48962277218579739);
        assertEq(gx.c1, 1081348219364668944500);
        assertEq(gx.c0, 98807362624434389140271);

        hx = RegressionTestHelper.cubic(points);
        assertEq(hx.c3, 940915846930440);
        assertEq(hx.c2, -20195037530807647);
        assertEq(hx.c1, 1082690059453976445903);
        assertEq(hx.c0, 98802161994365235208742);

        // case2 ---------------------------------------------------------------------------

        points[0] = (0 << 128) + 38079;
        points[1] = (1 << 128) + 38977;
        points[2] = (2 << 128) + 39881;
        points[3] = (3 << 128) + 40789;
        points[4] = (4 << 128) + 41705;
        points[5] = (5 << 128) + 42630;
        points[6] = (6 << 128) + 43565;
        points[7] = (7 << 128) + 44444;
        points[8] = (8 << 128) + 45473;
        points[9] = (9 << 128) + 46448;
        points[10] = (10 << 128) + 47440;
        points[11] = (11 << 128) + 48451;
        points[12] = (12 << 128) + 49482;
        points[13] = (13 << 128) + 50535;
        points[14] = (14 << 128) + 51526;
        points[15] = (15 << 128) + 52625;
        points[16] = (16 << 128) + 53849;
        points[17] = (17 << 128) + 55013;
        points[18] = (18 << 128) + 56208;
        points[19] = (19 << 128) + 57439;
        points[20] = (20 << 128) + 58708;
        points[21] = (21 << 128) + 60016;
        points[22] = (22 << 128) + 61368;
        points[23] = (23 << 128) + 62763;
        points[24] = (24 << 128) + 64206;
        points[25] = (25 << 128) + 65700;
        points[26] = (26 << 128) + 67245;
        points[27] = (27 << 128) + 68847;
        points[28] = (28 << 128) + 70508;
        points[29] = (29 << 128) + 72229;
        points[30] = (30 << 128) + 73826;
        points[31] = (31 << 128) + 75671;
        points[32] = (32 << 128) + 77794;
        points[33] = (33 << 128) + 79792;
        points[34] = (34 << 128) + 81868;
        points[35] = (35 << 128) + 84022;
        points[36] = (36 << 128) + 86261;
        points[37] = (37 << 128) + 88588;
        points[38] = (38 << 128) + 91004;
        points[39] = (39 << 128) + 93515;
        points[40] = (40 << 128) + 96123;
        points[41] = (41 << 128) + 98832;
        points[42] = (42 << 128) + 101647;
        points[43] = (43 << 128) + 104571;
        points[44] = (44 << 128) + 107608;
        points[45] = (45 << 128) + 110760;
        points[46] = (46 << 128) + 113633;
        points[47] = (47 << 128) + 117014;
        points[48] = (48 << 128) + 120956;
        points[49] = (49 << 128) + 124617;

        // Results from np.polyfit
        //
        // --- Optimal Linear ---
        // a (slope): 1661.8547418967582
        // b (y-intercept): 29769.57882352938
        // ------------------------------

        // --- Optimal Quadratic ---
        // a (x^2 term): 27.07018653615293
        // b (x term):   335.41560162526537
        // c (constant): 40381.09194570137
        // ------------------------------

        // --- Optimal Cubic ---
        // a (x^3 term): 0.4482223701944078
        // b (x^2 term): -5.874157673136074
        // c (x term):   974.6255237595111
        // d (constant): 37903.67726116282
        // ------------------------------

        fx = RegressionTestHelper.linear(points);
        assertEq(fx.c1, 1661854741896758703481);
        assertEq(fx.c0, 29769578823529411764705);

        gx = RegressionTestHelper.quadratic(points);
        assertEq(gx.c2, 27070186536152922707);
        assertEq(gx.c1, 335415601625265490811);
        assertEq(gx.c0, 40381091945701357466063);

        hx = RegressionTestHelper.cubic(points);
        assertEq(hx.c3, 448222370194410716);
        assertEq(hx.c2, -5874157673136264974);
        assertEq(hx.c1, 974625523759514613985);
        assertEq(hx.c0, 37903677261162810552377);

        // case3 ---------------------------------------------------------------------------

        for (uint256 i = 0; i < 200; i++) {
            points.push(0);
        }

        points[0] = (356 << 128) + 97445;
        points[1] = (420 << 128) + 98575;
        points[2] = (484 << 128) + 99657;
        points[3] = (548 << 128) + 100739;
        points[4] = (612 << 128) + 101809;
        points[5] = (676 << 128) + 102903;
        points[6] = (740 << 128) + 103985;
        points[7] = (804 << 128) + 105068;
        points[8] = (868 << 128) + 106138;
        points[9] = (932 << 128) + 107233;
        points[10] = (996 << 128) + 108315;
        points[11] = (1060 << 128) + 109386;
        points[12] = (1124 << 128) + 110469;
        points[13] = (1188 << 128) + 111540;
        points[14] = (1252 << 128) + 112623;
        points[15] = (1316 << 128) + 113706;
        points[16] = (1380 << 128) + 114789;
        points[17] = (1444 << 128) + 115897;
        points[18] = (1508 << 128) + 116968;
        points[19] = (1572 << 128) + 118052;
        points[20] = (1636 << 128) + 119123;
        points[21] = (1700 << 128) + 120219;
        points[22] = (1764 << 128) + 121315;
        points[23] = (1828 << 128) + 122399;
        points[24] = (1892 << 128) + 123483;
        points[25] = (1956 << 128) + 124543;
        points[26] = (2020 << 128) + 125651;
        points[27] = (2084 << 128) + 126723;
        points[28] = (2148 << 128) + 127808;
        points[29] = (2212 << 128) + 128904;
        points[30] = (2276 << 128) + 129977;
        points[31] = (2340 << 128) + 131062;
        points[32] = (2404 << 128) + 132146;
        points[33] = (2468 << 128) + 133219;
        points[34] = (2532 << 128) + 134316;
        points[35] = (2596 << 128) + 135413;
        points[36] = (2660 << 128) + 136486;
        points[37] = (2724 << 128) + 137548;
        points[38] = (2788 << 128) + 138657;
        points[39] = (2852 << 128) + 139719;
        points[40] = (2916 << 128) + 140840;
        points[41] = (2980 << 128) + 141914;
        points[42] = (3044 << 128) + 142988;
        points[43] = (3108 << 128) + 144062;
        points[44] = (3172 << 128) + 145160;
        points[45] = (3236 << 128) + 146246;
        points[46] = (3300 << 128) + 147356;
        points[47] = (3364 << 128) + 148430;
        points[48] = (3428 << 128) + 149516;
        points[49] = (3492 << 128) + 150543;
        points[50] = (3556 << 128) + 151653;
        points[51] = (3620 << 128) + 152776;
        points[52] = (3684 << 128) + 153875;
        points[53] = (3748 << 128) + 154962;
        points[54] = (3812 << 128) + 156049;
        points[55] = (3876 << 128) + 157112;
        points[56] = (3940 << 128) + 158211;
        points[57] = (4004 << 128) + 159298;
        points[58] = (4068 << 128) + 160385;
        points[59] = (4132 << 128) + 161449;
        points[60] = (4196 << 128) + 162560;
        points[61] = (4260 << 128) + 163648;
        points[62] = (4324 << 128) + 164748;
        points[63] = (4388 << 128) + 165800;
        points[64] = (4452 << 128) + 166899;
        points[65] = (4516 << 128) + 167987;
        points[66] = (4580 << 128) + 169088;
        points[67] = (4644 << 128) + 170176;
        points[68] = (4708 << 128) + 171216;
        points[69] = (4772 << 128) + 172329;
        points[70] = (4836 << 128) + 173441;
        points[71] = (4900 << 128) + 174542;
        points[72] = (4964 << 128) + 175558;
        points[73] = (5028 << 128) + 176671;
        points[74] = (5092 << 128) + 177796;
        points[75] = (5156 << 128) + 178873;
        points[76] = (5220 << 128) + 179974;
        points[77] = (5284 << 128) + 181063;
        points[78] = (5348 << 128) + 182117;
        points[79] = (5412 << 128) + 183230;
        points[80] = (5476 << 128) + 184319;
        points[81] = (5540 << 128) + 185409;
        points[82] = (5604 << 128) + 186499;
        points[83] = (5668 << 128) + 187589;
        points[84] = (5732 << 128) + 188690;
        points[85] = (5796 << 128) + 189732;
        points[86] = (5860 << 128) + 190834;
        points[87] = (5924 << 128) + 191937;
        points[88] = (5988 << 128) + 193003;
        points[89] = (6052 << 128) + 194141;
        points[90] = (6116 << 128) + 195160;
        points[91] = (6180 << 128) + 196322;
        points[92] = (6244 << 128) + 197413;
        points[93] = (6308 << 128) + 198492;
        points[94] = (6372 << 128) + 199523;
        points[95] = (6436 << 128) + 200650;
        points[96] = (6500 << 128) + 201765;
        points[97] = (6564 << 128) + 202880;
        points[98] = (6628 << 128) + 203971;
        points[99] = (6692 << 128) + 205026;
        points[100] = (6756 << 128) + 206106;
        points[101] = (6820 << 128) + 207221;
        points[102] = (6884 << 128) + 208313;
        points[103] = (6948 << 128) + 209381;
        points[104] = (7012 << 128) + 210472;
        points[105] = (7076 << 128) + 211564;
        points[106] = (7140 << 128) + 212680;
        points[107] = (7204 << 128) + 213785;
        points[108] = (7268 << 128) + 214841;
        points[109] = (7332 << 128) + 215969;
        points[110] = (7396 << 128) + 217049;
        points[111] = (7460 << 128) + 218106;
        points[112] = (7524 << 128) + 219151;
        points[113] = (7588 << 128) + 220291;
        points[114] = (7652 << 128) + 221372;
        points[115] = (7716 << 128) + 222489;
        points[116] = (7780 << 128) + 223558;
        points[117] = (7844 << 128) + 224723;
        points[118] = (7908 << 128) + 225756;
        points[119] = (7972 << 128) + 226886;
        points[120] = (8036 << 128) + 227955;
        points[121] = (8100 << 128) + 229049;
        points[122] = (8164 << 128) + 230178;
        points[123] = (8228 << 128) + 231260;
        points[124] = (8292 << 128) + 232366;
        points[125] = (8356 << 128) + 233423;
        points[126] = (8420 << 128) + 234553;
        points[127] = (8484 << 128) + 235624;
        points[128] = (8548 << 128) + 236730;
        points[129] = (8612 << 128) + 237824;
        points[130] = (8676 << 128) + 238894;
        points[131] = (8740 << 128) + 239989;
        points[132] = (8804 << 128) + 241107;
        points[133] = (8868 << 128) + 242154;
        points[134] = (8932 << 128) + 243285;
        points[135] = (8996 << 128) + 244392;
        points[136] = (9060 << 128) + 245475;
        points[137] = (9124 << 128) + 246534;
        points[138] = (9188 << 128) + 247641;
        points[139] = (9252 << 128) + 248712;
        points[140] = (9316 << 128) + 249855;
        points[141] = (9380 << 128) + 250915;
        points[142] = (9444 << 128) + 251950;
        points[143] = (9508 << 128) + 253130;
        points[144] = (9572 << 128) + 254202;
        points[145] = (9636 << 128) + 255322;
        points[146] = (9700 << 128) + 256418;
        points[147] = (9764 << 128) + 257538;
        points[148] = (9828 << 128) + 258598;
        points[149] = (9892 << 128) + 259622;
        points[150] = (9956 << 128) + 260730;
        points[151] = (10020 << 128) + 261923;
        points[152] = (10084 << 128) + 263007;
        points[153] = (10148 << 128) + 264080;
        points[154] = (10212 << 128) + 265188;
        points[155] = (10276 << 128) + 266273;
        points[156] = (10340 << 128) + 267370;
        points[157] = (10404 << 128) + 268443;
        points[158] = (10468 << 128) + 269564;
        points[159] = (10532 << 128) + 270638;
        points[160] = (10596 << 128) + 271771;
        points[161] = (10660 << 128) + 272868;
        points[162] = (10724 << 128) + 273942;
        points[163] = (10788 << 128) + 275039;
        points[164] = (10852 << 128) + 276149;
        points[165] = (10916 << 128) + 277259;
        points[166] = (10980 << 128) + 278333;
        points[167] = (11044 << 128) + 279431;
        points[168] = (11108 << 128) + 280529;
        points[169] = (11172 << 128) + 281663;
        points[170] = (11236 << 128) + 282773;
        points[171] = (11300 << 128) + 283812;
        points[172] = (11364 << 128) + 284970;
        points[173] = (11428 << 128) + 286057;
        points[174] = (11492 << 128) + 287131;
        points[175] = (11556 << 128) + 288134;
        points[176] = (11620 << 128) + 289293;
        points[177] = (11684 << 128) + 290380;
        points[178] = (11748 << 128) + 291515;
        points[179] = (11812 << 128) + 292614;
        points[180] = (11876 << 128) + 293737;
        points[181] = (11940 << 128) + 294813;
        points[182] = (12004 << 128) + 295948;
        points[183] = (12068 << 128) + 297012;
        points[184] = (12132 << 128) + 298123;
        points[185] = (12196 << 128) + 299247;
        points[186] = (12260 << 128) + 300347;
        points[187] = (12324 << 128) + 301459;
        points[188] = (12388 << 128) + 302499;
        points[189] = (12452 << 128) + 303635;
        points[190] = (12516 << 128) + 304735;
        points[191] = (12580 << 128) + 305812;
        points[192] = (12644 << 128) + 306924;
        points[193] = (12708 << 128) + 308012;
        points[194] = (12772 << 128) + 309101;
        points[195] = (12836 << 128) + 310250;
        points[196] = (12900 << 128) + 311291;
        points[197] = (12964 << 128) + 312428;
        points[198] = (13028 << 128) + 313565;
        points[199] = (13092 << 128) + 314618;
        points[200] = (13156 << 128) + 315707;
        points[201] = (13220 << 128) + 316784;
        points[202] = (13284 << 128) + 317898;
        points[203] = (13348 << 128) + 319047;
        points[204] = (13412 << 128) + 320101;
        points[205] = (13476 << 128) + 321166;
        points[206] = (13540 << 128) + 322340;
        points[207] = (13604 << 128) + 323430;
        points[208] = (13668 << 128) + 324532;
        points[209] = (13732 << 128) + 325634;
        points[210] = (13796 << 128) + 326760;
        points[211] = (13860 << 128) + 327827;
        points[212] = (13924 << 128) + 328845;
        points[213] = (13988 << 128) + 330007;
        points[214] = (14052 << 128) + 331146;
        points[215] = (14116 << 128) + 332261;
        points[216] = (14180 << 128) + 333339;
        points[217] = (14244 << 128) + 334430;
        points[218] = (14308 << 128) + 335533;
        points[219] = (14372 << 128) + 336648;
        points[220] = (14436 << 128) + 337739;
        points[221] = (14500 << 128) + 338867;
        points[222] = (14564 << 128) + 339958;
        points[223] = (14628 << 128) + 341074;
        points[224] = (14692 << 128) + 342189;
        points[225] = (14756 << 128) + 343221;
        points[226] = (14820 << 128) + 344360;
        points[227] = (14884 << 128) + 345500;
        points[228] = (14948 << 128) + 346556;
        points[229] = (15012 << 128) + 347660;
        points[230] = (15076 << 128) + 348788;
        points[231] = (15140 << 128) + 349893;
        points[232] = (15204 << 128) + 350997;
        points[233] = (15268 << 128) + 352101;
        points[234] = (15332 << 128) + 353242;
        points[235] = (15396 << 128) + 354191;
        points[236] = (15460 << 128) + 355391;
        points[237] = (15524 << 128) + 356556;
        points[238] = (15588 << 128) + 357661;
        points[239] = (15652 << 128) + 358742;
        points[240] = (15716 << 128) + 359871;
        points[241] = (15780 << 128) + 360940;
        points[242] = (15844 << 128) + 362070;
        points[243] = (15908 << 128) + 363187;
        points[244] = (15972 << 128) + 364185;
        points[245] = (16036 << 128) + 365350;
        points[246] = (16100 << 128) + 366492;
        points[247] = (16164 << 128) + 367598;
        points[248] = (16228 << 128) + 368668;
        points[249] = (16292 << 128) + 369786;

        // Results from np.polyfit
        // --- Optimal Linear ---
        // y = a*x + b    | a≈16.990460545593063  b≈91274.30781323243

        // --- Optimal Quadratic ---
        // y = a*x^2+bx+c | a≈1.3213146669124686e-05 b≈16.878730177358975 c≈91481.64576242982

        // --- Optimal Cubic ---
        // y = ax^3+bx^2+cx+d | a≈-2.6976128549173684e-10 b≈1.6634798814289008e-05 c≈16.865323789895797 d≈91497.55103595725

        fx = RegressionTestHelper.linear(points);
        assertEq(fx.c1, 17086333251332021312);
        assertEq(fx.c0, 90905422015912254596073);

        gx = RegressionTestHelper.quadratic(points);
        assertEq(gx.c2, 11884903850137);
        assertEq(gx.c1, 16888473372034926061);
        assertEq(gx.c0, 91475374274791004662987);

        hx = RegressionTestHelper.cubic(points);
        assertEq(hx.c3, 26057990);
        assertEq(hx.c2, 11234183700431);
        assertEq(hx.c1, 16892889377065793945);
        assertEq(hx.c0, 91468673937471204389043);
    }
}
