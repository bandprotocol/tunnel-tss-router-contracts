// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "./BandTssBridge.sol";

abstract contract OracleConsumer is BandTssBridge {
    // The prefix for the oracle result message
    bytes8 ORACLE_RESULT_PREFIX = 0x89cbf5af45b4e7ea;

    // type of encoding of the oracle result
    enum OracleTssEncodeType {
        UNDEFINED,
        PROTO,
        FULL_ABI,
        PARTIAL_ABI
    }

    // An oracle result from bandchain, the order of the fields is the same as the ABI encoding
    // defined in tss package.
    struct OracleResult {
        string ClientID;
        uint64 OracleScriptID;
        bytes Calldata;
        uint64 AskCount;
        uint64 MinCount;
        uint64 RequestID;
        uint64 AnsCount;
        int64 RequestTime;
        int64 ResolveTime;
        int32 ResolveStatus;
        bytes Result;
    }

    // requestID to oracle result
    mapping(uint => OracleResult) public OracleResults;
    // requestID to request type
    mapping(uint => OracleTssEncodeType) public OracleRequestTypes;

    event RelayOracleResult(
        uint64 indexed requestID,
        uint64 indexed OracleScriptID,
        OracleTssEncodeType encodeType
    );

    /// @dev relay the oracle result and store it in the chain
    /// @param rAddress is the address form of the commitment R
    /// @param s represents the Schnorr signature generated by the current circle's private key
    /// @param result is the oracle result from bandchain
    function relayFullAbi(
        address rAddress,
        uint256 s,
        OracleResult memory result
    ) external {
        bytes32 msgHash = keccak256(
            abi.encodePacked(ORACLE_RESULT_PREFIX, abi.encode(result))
        );
        require(
            verify(rAddress, s, msgHash),
            "OracleConsumer: Public key update fails, the current circle's signature is invalid."
        );

        OracleResults[result.RequestID] = result;
        OracleRequestTypes[result.RequestID] = OracleTssEncodeType.FULL_ABI;

        emit RelayOracleResult(
            result.RequestID,
            result.OracleScriptID,
            OracleTssEncodeType.FULL_ABI
        );
    }
}
