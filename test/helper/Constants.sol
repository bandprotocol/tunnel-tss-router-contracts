// SPDX-License-Identifier: MIT

pragma solidity ^0.8.13;

import "../../src/interfaces/IDataConsumer.sol";
import "../../src/PacketDecoder.sol";

contract Constants is PacketDecoder {
    uint8 CURRENT_GROUP_PARITY = 2;
    uint CURRENT_GROUP_PX =
        0x44417D812CD100AC005F5554F83BCBC4FAE4DFACC74C3833733A0EE67946FDB9;

    bytes constant TSS_RAW_MESSAGE =
        abi.encodePacked(
            hex"0E1AC2C4A50A82AA49717691FC1AE2E5FA68EFF45BD8576B0F2BE7A0850FA7C6",
            hex"95C07FC70EB214B432CC70A9CFA044AEB532577C0B6F7B1AAB2F6E5A7D030E92",
            hex"000000006703A3240000000000000002D3813E0CCBA0AD5A",
            hex"0000000000000000000000000000000000000000000000000000000000000020",
            hex"0000000000000000000000000000000000000000000000000000000000000001",
            hex"0000000000000000000000000000000000000000000000000000000000000002",
            hex"0000000000000000000000000000000000000000000000000000000000000080",
            hex"000000000000000000000000000000000000000000000000000000006703A324",
            hex"0000000000000000000000000000000000000000000000000000000000000002",
            hex"0000000000000000000000000063727970746F5F70726963652E627463757364",
            hex"0000000000000000000000000000000000000000000000000000000000000000",
            hex"0000000000000000000000000063727970746F5F70726963652E657468757364",
            hex"0000000000000000000000000000000000000000000000000000000000000000"
        );
    uint constant MESSAGE_SIGNATURE =
        0x5DDF044945CBD0EA1472AF39766E9D93999F9D2815C3EC01BBF9017609084BD0;
    address constant SIGNATURE_NONCE_ADDR =
        0x2E868784006cD3C6e2C5EfCd2D3DA2c4dCAC20a4;

    function DECODED_TSS_MESSAGE() public pure returns (TssMessage memory) {
        SignalPrice[] memory signalPriceInfos = new SignalPrice[](2);
        bytes memory signalIDBtc = abi.encodePacked(
            hex"00000000000000000000000000",
            "crypto_price.btcusd"
        );
        signalPriceInfos[0] = SignalPrice(bytes32(signalIDBtc), 0);

        bytes memory signalIDEth = abi.encodePacked(
            hex"00000000000000000000000000",
            "crypto_price.ethusd"
        );
        signalPriceInfos[1] = SignalPrice(bytes32(signalIDEth), 0);

        Packet memory packet = Packet(1, 2, signalPriceInfos, 1728291620);

        TssMessage memory tssMessage = TssMessage(
            0x0E1AC2C4A50A82AA49717691FC1AE2E5FA68EFF45BD8576B0F2BE7A0850FA7C6,
            0x95C07FC70EB214B432CC70A9CFA044AEB532577C0B6F7B1AAB2F6E5A7D030E92,
            1728291620,
            2,
            EncoderType.FixedPoint,
            packet
        );

        return tssMessage;
    }

    constructor() {}
}
