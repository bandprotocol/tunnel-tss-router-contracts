// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "./interfaces/IBandTssVerifier.sol";

abstract contract OracleFullABIResultConsumer {
    // The hashed chain ID of the oracle result
    bytes32 constant HASH_CHAIN_ID =
        0x0E1AC2C4A50A82AA49717691FC1AE2E5FA68EFF45BD8576B0F2BE7A0850FA7C6;
    // The prefix for the oracle result message
    bytes8 constant ORACLE_RESULT_PREFIX = 0x89cbf5af45b4e7ea;
    // The band tss verifier contract
    IBandTssVerifier public immutable bandTssVerifier;

    // An oracle result from bandchain, the order of the fields is the same as the ABI encoding
    // defined in tss package.
    struct OracleResult {
        string ClientID;
        uint64 OracleScriptID;
        bytes Calldata;
        uint64 AskCount;
        uint64 MinCount;
        uint64 RequestID;
        uint64 AnsCount;
        int64 RequestTime;
        int64 ResolveTime;
        int32 ResolveStatus;
        bytes Result;
    }

    // requestID to oracle result
    mapping(uint => OracleResult) public OracleResults;

    event RelayOracleResult(
        uint64 indexed requestID,
        uint64 indexed OracleScriptID
    );

    constructor(IBandTssVerifier _bandTssVerifier) {
        bandTssVerifier = _bandTssVerifier;
    }

    /// @dev relay the oracle result and store it in the chain
    /// @param signingID is the signing ID of the oracle result
    /// @param timestamp is the timestamp of the oracle result
    /// @param hashOriginator is the hashed originator of the oracle result
    /// @param rAddress is the address form of the commitment R
    /// @param s represents the Schnorr signature generated by the current circle's private key
    /// @param result is the oracle result from bandchain
    function relayFullAbi(
        uint64 signingID,
        uint64 timestamp,
        bytes32 hashOriginator,
        address rAddress,
        uint256 s,
        OracleResult memory result
    ) external {
        bytes memory data = abi.encodePacked(
            ORACLE_RESULT_PREFIX,
            abi.encode(result)
        );

        require(
            bandTssVerifier.verifySignature(
                signingID,
                timestamp,
                hashOriginator,
                rAddress,
                s,
                data
            ),
            "OracleConsumer: Fail to verify message."
        );

        OracleResults[result.RequestID] = result;

        emit RelayOracleResult(result.RequestID, result.OracleScriptID);
    }
}
